namespace team

import common
import team_policies
import users

#
# Common types
#

alias TeamMemberId = String
alias MemberExternalId = String(max_length=64)

# Note that in the database, we also have members that are in state "deleted"
# meaning that the User has been permanently removed from the team.
# But the API is not going to expose such users externally.  We will omit such users
# in API responses.
#
union_closed TeamMemberStatus
    "The user's status as a member of a specific team."

    active
        "User has successfully joined the team."
    invited
        "User has been invited to a team, but has not joined the team yet."
    suspended
        "User is no longer a member of the team, but the account can be un-suspended,
        re-establishing the user as a team member."
    removed RemovedStatus
        "User is no longer a member of the team.
        Removed users are only listed when include_removed is true in members/list."

struct RemovedStatus
    is_recoverable Boolean
        "True if the removed team member is recoverable"

    example default
        is_recoverable = false

union_closed TeamMembershipType
    full
        "User uses a license and has full access to team resources like the shared quota."
    limited
        "User does not have access to the shared quota and team admins have restricted administrative control."

struct MemberProfile
    "Basic member profile."

    team_member_id TeamMemberId
        "ID of user as a member of a team."
    external_id String?
        "External ID that a team can attach to the user.
        An application using the API may find it easier to use their
        own IDs instead of Dropbox IDs like account_id or team_member_id."
    account_id users.AccountId?
        "A user's account identifier."
    email String
        "Email address of user."
    email_verified Boolean
        "Is true if the user's email is verified to be owned by the user."
    status TeamMemberStatus
        "The user's status as a member of a specific team."
    name users.Name
        "Representations for a person's name."
    membership_type TeamMembershipType
        "The user's membership type: full (normal team member) vs limited (does not use a license; no access to the team's shared quota)."

    example default
        team_member_id = "dbmid:1234567"
        account_id = "dbid:AAH4f99T0taONIb-OurWxbNQ6ywGRopQngc"
        email = "mary@lamb.com"
        email_verified = true
        status = active
        name = default
        membership_type = full

union_closed UserSelectorArg
    "Argument for selecting a single user, either by team_member_id, external_id or email."

    team_member_id TeamMemberId
    external_id MemberExternalId
    email common.EmailAddress

    example default
        team_member_id = "dbmid:efgh5678"

    example email
        email = "dan@hotmail.com"


union_closed UserSelectorError
    "Error that can be returned whenever a struct derived from :type:`UserSelectorArg` is used."

    user_not_found
        "No matching user found. The provided team_member_id, email, or external_id does not exist on this team."


union_closed UsersSelectorArg
    "Argument for selecting a list of users, either by team_member_ids, external_ids or emails."

    team_member_ids List(TeamMemberId)
        "List of member IDs."
    external_ids List(MemberExternalId)
        "List of external user IDs."
    emails List(common.EmailAddress)
        "List of email addresses."



#
# Handle DfB routes that do not have a better place to be.
#

#
# Route get_info
#

struct TeamGetInfoResult

    name String
        "The name of the team."
    team_id String
        "The ID of the team."
    num_licensed_users UInt32
        "The number of licenses available to the team."
    num_provisioned_users UInt32
        "The number of accounts that have been invited or are already active members of the team."
    policies team_policies.TeamMemberPolicies

    example default
        name="Dropbox Inc."
        team_id="dbtid:1234abcd"
        num_licensed_users=5
        num_provisioned_users=2
        policies=default

route get_info(Void, TeamGetInfoResult, Void)
    "Retrieves information about a team."

    attrs
        auth = "team"
        owner = "adminx"
